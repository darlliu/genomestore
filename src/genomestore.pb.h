// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomestore.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_genomestore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_genomestore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_genomestore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_genomestore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_genomestore_2eproto();
namespace genomestore {
class Gene;
class GeneDefaultTypeInternal;
extern GeneDefaultTypeInternal _Gene_default_instance_;
class Genome;
class GenomeDefaultTypeInternal;
extern GenomeDefaultTypeInternal _Genome_default_instance_;
class Interval;
class IntervalDefaultTypeInternal;
extern IntervalDefaultTypeInternal _Interval_default_instance_;
class Snp;
class SnpDefaultTypeInternal;
extern SnpDefaultTypeInternal _Snp_default_instance_;
class Variant;
class VariantDefaultTypeInternal;
extern VariantDefaultTypeInternal _Variant_default_instance_;
}  // namespace genomestore
PROTOBUF_NAMESPACE_OPEN
template<> ::genomestore::Gene* Arena::CreateMaybeMessage<::genomestore::Gene>(Arena*);
template<> ::genomestore::Genome* Arena::CreateMaybeMessage<::genomestore::Genome>(Arena*);
template<> ::genomestore::Interval* Arena::CreateMaybeMessage<::genomestore::Interval>(Arena*);
template<> ::genomestore::Snp* Arena::CreateMaybeMessage<::genomestore::Snp>(Arena*);
template<> ::genomestore::Variant* Arena::CreateMaybeMessage<::genomestore::Variant>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace genomestore {

enum Base {
  a = 0,
  c = 1,
  g = 2,
  t = 3,
  u = 4,
  n = 5,
  Base_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Base_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Base_IsValid(int value);
constexpr Base Base_MIN = a;
constexpr Base Base_MAX = n;
constexpr int Base_ARRAYSIZE = Base_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Base_descriptor();
inline const std::string& Base_Name(Base value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Base_descriptor(), value);
}
inline bool Base_Parse(
    const std::string& name, Base* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Base>(
    Base_descriptor(), name, value);
}
// ===================================================================

class Interval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:genomestore.Interval) */ {
 public:
  Interval();
  virtual ~Interval();

  Interval(const Interval& from);
  Interval(Interval&& from) noexcept
    : Interval() {
    *this = ::std::move(from);
  }

  inline Interval& operator=(const Interval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interval& operator=(Interval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Interval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Interval* internal_default_instance() {
    return reinterpret_cast<const Interval*>(
               &_Interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Interval* other);
  friend void swap(Interval& a, Interval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Interval* New() const final {
    return CreateMaybeMessage<Interval>(nullptr);
  }

  Interval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Interval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Interval& from);
  void MergeFrom(const Interval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "genomestore.Interval";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .genomestore.Base seq = 6;
  int seq_size() const;
  void clear_seq();
  static const int kSeqFieldNumber = 6;
  ::genomestore::Base seq(int index) const;
  void set_seq(int index, ::genomestore::Base value);
  void add_seq(::genomestore::Base value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& seq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_seq();

  // string ref = 1;
  void clear_ref();
  static const int kRefFieldNumber = 1;
  const std::string& ref() const;
  void set_ref(const std::string& value);
  void set_ref(std::string&& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  std::string* mutable_ref();
  std::string* release_ref();
  void set_allocated_ref(std::string* ref);

  // string chr = 2;
  void clear_chr();
  static const int kChrFieldNumber = 2;
  const std::string& chr() const;
  void set_chr(const std::string& value);
  void set_chr(std::string&& value);
  void set_chr(const char* value);
  void set_chr(const char* value, size_t size);
  std::string* mutable_chr();
  std::string* release_chr();
  void set_allocated_chr(std::string* chr);

  // string seqs = 7;
  void clear_seqs();
  static const int kSeqsFieldNumber = 7;
  const std::string& seqs() const;
  void set_seqs(const std::string& value);
  void set_seqs(std::string&& value);
  void set_seqs(const char* value);
  void set_seqs(const char* value, size_t size);
  std::string* mutable_seqs();
  std::string* release_seqs();
  void set_allocated_seqs(std::string* seqs);

  // uint32 start = 3;
  void clear_start();
  static const int kStartFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 len = 4;
  void clear_len();
  static const int kLenFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool strand = 5;
  void clear_strand();
  static const int kStrandFieldNumber = 5;
  bool strand() const;
  void set_strand(bool value);

  // float score = 8;
  void clear_score();
  static const int kScoreFieldNumber = 8;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:genomestore.Interval)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> seq_;
  mutable std::atomic<int> _seq_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seqs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  bool strand_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_genomestore_2eproto;
};
// -------------------------------------------------------------------

class Gene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:genomestore.Gene) */ {
 public:
  Gene();
  virtual ~Gene();

  Gene(const Gene& from);
  Gene(Gene&& from) noexcept
    : Gene() {
    *this = ::std::move(from);
  }

  inline Gene& operator=(const Gene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gene& operator=(Gene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Gene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gene* internal_default_instance() {
    return reinterpret_cast<const Gene*>(
               &_Gene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Gene* other);
  friend void swap(Gene& a, Gene& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gene* New() const final {
    return CreateMaybeMessage<Gene>(nullptr);
  }

  Gene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gene& from);
  void MergeFrom(const Gene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "genomestore.Gene";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .genomestore.Interval exons = 7;
  int exons_size() const;
  void clear_exons();
  static const int kExonsFieldNumber = 7;
  ::genomestore::Interval* mutable_exons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval >*
      mutable_exons();
  const ::genomestore::Interval& exons(int index) const;
  ::genomestore::Interval* add_exons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval >&
      exons() const;

  // repeated .genomestore.Interval introns = 8;
  int introns_size() const;
  void clear_introns();
  static const int kIntronsFieldNumber = 8;
  ::genomestore::Interval* mutable_introns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval >*
      mutable_introns();
  const ::genomestore::Interval& introns(int index) const;
  ::genomestore::Interval* add_introns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval >&
      introns() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string sym = 2;
  void clear_sym();
  static const int kSymFieldNumber = 2;
  const std::string& sym() const;
  void set_sym(const std::string& value);
  void set_sym(std::string&& value);
  void set_sym(const char* value);
  void set_sym(const char* value, size_t size);
  std::string* mutable_sym();
  std::string* release_sym();
  void set_allocated_sym(std::string* sym);

  // string ref = 3;
  void clear_ref();
  static const int kRefFieldNumber = 3;
  const std::string& ref() const;
  void set_ref(const std::string& value);
  void set_ref(std::string&& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  std::string* mutable_ref();
  std::string* release_ref();
  void set_allocated_ref(std::string* ref);

  // string chr = 4;
  void clear_chr();
  static const int kChrFieldNumber = 4;
  const std::string& chr() const;
  void set_chr(const std::string& value);
  void set_chr(std::string&& value);
  void set_chr(const char* value);
  void set_chr(const char* value, size_t size);
  std::string* mutable_chr();
  std::string* release_chr();
  void set_allocated_chr(std::string* chr);

  // .genomestore.Interval tx = 5;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 5;
  const ::genomestore::Interval& tx() const;
  ::genomestore::Interval* release_tx();
  ::genomestore::Interval* mutable_tx();
  void set_allocated_tx(::genomestore::Interval* tx);

  // .genomestore.Interval cds = 6;
  bool has_cds() const;
  void clear_cds();
  static const int kCdsFieldNumber = 6;
  const ::genomestore::Interval& cds() const;
  ::genomestore::Interval* release_cds();
  ::genomestore::Interval* mutable_cds();
  void set_allocated_cds(::genomestore::Interval* cds);

  // @@protoc_insertion_point(class_scope:genomestore.Gene)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval > exons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval > introns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sym_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chr_;
  ::genomestore::Interval* tx_;
  ::genomestore::Interval* cds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_genomestore_2eproto;
};
// -------------------------------------------------------------------

class Genome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:genomestore.Genome) */ {
 public:
  Genome();
  virtual ~Genome();

  Genome(const Genome& from);
  Genome(Genome&& from) noexcept
    : Genome() {
    *this = ::std::move(from);
  }

  inline Genome& operator=(const Genome& from) {
    CopyFrom(from);
    return *this;
  }
  inline Genome& operator=(Genome&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Genome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Genome* internal_default_instance() {
    return reinterpret_cast<const Genome*>(
               &_Genome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Genome* other);
  friend void swap(Genome& a, Genome& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Genome* New() const final {
    return CreateMaybeMessage<Genome>(nullptr);
  }

  Genome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Genome>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Genome& from);
  void MergeFrom(const Genome& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Genome* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "genomestore.Genome";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string id = 1;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  void set_id(int index, const std::string& value);
  void set_id(int index, std::string&& value);
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, size_t size);
  std::string* add_id();
  void add_id(const std::string& value);
  void add_id(std::string&& value);
  void add_id(const char* value);
  void add_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_id();

  // @@protoc_insertion_point(class_scope:genomestore.Genome)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_genomestore_2eproto;
};
// -------------------------------------------------------------------

class Variant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:genomestore.Variant) */ {
 public:
  Variant();
  virtual ~Variant();

  Variant(const Variant& from);
  Variant(Variant&& from) noexcept
    : Variant() {
    *this = ::std::move(from);
  }

  inline Variant& operator=(const Variant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variant& operator=(Variant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Variant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variant* internal_default_instance() {
    return reinterpret_cast<const Variant*>(
               &_Variant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Variant* other);
  friend void swap(Variant& a, Variant& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variant* New() const final {
    return CreateMaybeMessage<Variant>(nullptr);
  }

  Variant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variant& from);
  void MergeFrom(const Variant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "genomestore.Variant";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float frequency = 2;
  int frequency_size() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  float frequency(int index) const;
  void set_frequency(int index, float value);
  void add_frequency(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      frequency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_frequency();

  // string allele = 1;
  void clear_allele();
  static const int kAlleleFieldNumber = 1;
  const std::string& allele() const;
  void set_allele(const std::string& value);
  void set_allele(std::string&& value);
  void set_allele(const char* value);
  void set_allele(const char* value, size_t size);
  std::string* mutable_allele();
  std::string* release_allele();
  void set_allocated_allele(std::string* allele);

  // @@protoc_insertion_point(class_scope:genomestore.Variant)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > frequency_;
  mutable std::atomic<int> _frequency_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allele_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_genomestore_2eproto;
};
// -------------------------------------------------------------------

class Snp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:genomestore.Snp) */ {
 public:
  Snp();
  virtual ~Snp();

  Snp(const Snp& from);
  Snp(Snp&& from) noexcept
    : Snp() {
    *this = ::std::move(from);
  }

  inline Snp& operator=(const Snp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snp& operator=(Snp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Snp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snp* internal_default_instance() {
    return reinterpret_cast<const Snp*>(
               &_Snp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Snp* other);
  friend void swap(Snp& a, Snp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snp* New() const final {
    return CreateMaybeMessage<Snp>(nullptr);
  }

  Snp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snp& from);
  void MergeFrom(const Snp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "genomestore.Snp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .genomestore.Variant vars = 3;
  int vars_size() const;
  void clear_vars();
  static const int kVarsFieldNumber = 3;
  ::genomestore::Variant* mutable_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Variant >*
      mutable_vars();
  const ::genomestore::Variant& vars(int index) const;
  ::genomestore::Variant* add_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Variant >&
      vars() const;

  // string ref = 2;
  void clear_ref();
  static const int kRefFieldNumber = 2;
  const std::string& ref() const;
  void set_ref(const std::string& value);
  void set_ref(std::string&& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  std::string* mutable_ref();
  std::string* release_ref();
  void set_allocated_ref(std::string* ref);

  // uint32 rsid = 1;
  void clear_rsid();
  static const int kRsidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 rsid() const;
  void set_rsid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:genomestore.Snp)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Variant > vars_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_genomestore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Interval

// string ref = 1;
inline void Interval::clear_ref() {
  ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Interval::ref() const {
  // @@protoc_insertion_point(field_get:genomestore.Interval.ref)
  return ref_.GetNoArena();
}
inline void Interval::set_ref(const std::string& value) {
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Interval.ref)
}
inline void Interval::set_ref(std::string&& value) {
  
  ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Interval.ref)
}
inline void Interval::set_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Interval.ref)
}
inline void Interval::set_ref(const char* value, size_t size) {
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Interval.ref)
}
inline std::string* Interval::mutable_ref() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Interval.ref)
  return ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Interval::release_ref() {
  // @@protoc_insertion_point(field_release:genomestore.Interval.ref)
  
  return ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Interval::set_allocated_ref(std::string* ref) {
  if (ref != nullptr) {
    
  } else {
    
  }
  ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Interval.ref)
}

// string chr = 2;
inline void Interval::clear_chr() {
  chr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Interval::chr() const {
  // @@protoc_insertion_point(field_get:genomestore.Interval.chr)
  return chr_.GetNoArena();
}
inline void Interval::set_chr(const std::string& value) {
  
  chr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Interval.chr)
}
inline void Interval::set_chr(std::string&& value) {
  
  chr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Interval.chr)
}
inline void Interval::set_chr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Interval.chr)
}
inline void Interval::set_chr(const char* value, size_t size) {
  
  chr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Interval.chr)
}
inline std::string* Interval::mutable_chr() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Interval.chr)
  return chr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Interval::release_chr() {
  // @@protoc_insertion_point(field_release:genomestore.Interval.chr)
  
  return chr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Interval::set_allocated_chr(std::string* chr) {
  if (chr != nullptr) {
    
  } else {
    
  }
  chr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chr);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Interval.chr)
}

// uint32 start = 3;
inline void Interval::clear_start() {
  start_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Interval::start() const {
  // @@protoc_insertion_point(field_get:genomestore.Interval.start)
  return start_;
}
inline void Interval::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:genomestore.Interval.start)
}

// uint32 len = 4;
inline void Interval::clear_len() {
  len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Interval::len() const {
  // @@protoc_insertion_point(field_get:genomestore.Interval.len)
  return len_;
}
inline void Interval::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:genomestore.Interval.len)
}

// bool strand = 5;
inline void Interval::clear_strand() {
  strand_ = false;
}
inline bool Interval::strand() const {
  // @@protoc_insertion_point(field_get:genomestore.Interval.strand)
  return strand_;
}
inline void Interval::set_strand(bool value) {
  
  strand_ = value;
  // @@protoc_insertion_point(field_set:genomestore.Interval.strand)
}

// repeated .genomestore.Base seq = 6;
inline int Interval::seq_size() const {
  return seq_.size();
}
inline void Interval::clear_seq() {
  seq_.Clear();
}
inline ::genomestore::Base Interval::seq(int index) const {
  // @@protoc_insertion_point(field_get:genomestore.Interval.seq)
  return static_cast< ::genomestore::Base >(seq_.Get(index));
}
inline void Interval::set_seq(int index, ::genomestore::Base value) {
  seq_.Set(index, value);
  // @@protoc_insertion_point(field_set:genomestore.Interval.seq)
}
inline void Interval::add_seq(::genomestore::Base value) {
  seq_.Add(value);
  // @@protoc_insertion_point(field_add:genomestore.Interval.seq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Interval::seq() const {
  // @@protoc_insertion_point(field_list:genomestore.Interval.seq)
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Interval::mutable_seq() {
  // @@protoc_insertion_point(field_mutable_list:genomestore.Interval.seq)
  return &seq_;
}

// string seqs = 7;
inline void Interval::clear_seqs() {
  seqs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Interval::seqs() const {
  // @@protoc_insertion_point(field_get:genomestore.Interval.seqs)
  return seqs_.GetNoArena();
}
inline void Interval::set_seqs(const std::string& value) {
  
  seqs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Interval.seqs)
}
inline void Interval::set_seqs(std::string&& value) {
  
  seqs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Interval.seqs)
}
inline void Interval::set_seqs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seqs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Interval.seqs)
}
inline void Interval::set_seqs(const char* value, size_t size) {
  
  seqs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Interval.seqs)
}
inline std::string* Interval::mutable_seqs() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Interval.seqs)
  return seqs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Interval::release_seqs() {
  // @@protoc_insertion_point(field_release:genomestore.Interval.seqs)
  
  return seqs_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Interval::set_allocated_seqs(std::string* seqs) {
  if (seqs != nullptr) {
    
  } else {
    
  }
  seqs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seqs);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Interval.seqs)
}

// float score = 8;
inline void Interval::clear_score() {
  score_ = 0;
}
inline float Interval::score() const {
  // @@protoc_insertion_point(field_get:genomestore.Interval.score)
  return score_;
}
inline void Interval::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:genomestore.Interval.score)
}

// -------------------------------------------------------------------

// Gene

// string id = 1;
inline void Gene::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Gene::id() const {
  // @@protoc_insertion_point(field_get:genomestore.Gene.id)
  return id_.GetNoArena();
}
inline void Gene::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Gene.id)
}
inline void Gene::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Gene.id)
}
inline void Gene::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Gene.id)
}
inline void Gene::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Gene.id)
}
inline std::string* Gene::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Gene.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Gene::release_id() {
  // @@protoc_insertion_point(field_release:genomestore.Gene.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Gene::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Gene.id)
}

// string sym = 2;
inline void Gene::clear_sym() {
  sym_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Gene::sym() const {
  // @@protoc_insertion_point(field_get:genomestore.Gene.sym)
  return sym_.GetNoArena();
}
inline void Gene::set_sym(const std::string& value) {
  
  sym_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Gene.sym)
}
inline void Gene::set_sym(std::string&& value) {
  
  sym_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Gene.sym)
}
inline void Gene::set_sym(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sym_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Gene.sym)
}
inline void Gene::set_sym(const char* value, size_t size) {
  
  sym_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Gene.sym)
}
inline std::string* Gene::mutable_sym() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Gene.sym)
  return sym_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Gene::release_sym() {
  // @@protoc_insertion_point(field_release:genomestore.Gene.sym)
  
  return sym_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Gene::set_allocated_sym(std::string* sym) {
  if (sym != nullptr) {
    
  } else {
    
  }
  sym_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sym);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Gene.sym)
}

// string ref = 3;
inline void Gene::clear_ref() {
  ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Gene::ref() const {
  // @@protoc_insertion_point(field_get:genomestore.Gene.ref)
  return ref_.GetNoArena();
}
inline void Gene::set_ref(const std::string& value) {
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Gene.ref)
}
inline void Gene::set_ref(std::string&& value) {
  
  ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Gene.ref)
}
inline void Gene::set_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Gene.ref)
}
inline void Gene::set_ref(const char* value, size_t size) {
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Gene.ref)
}
inline std::string* Gene::mutable_ref() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Gene.ref)
  return ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Gene::release_ref() {
  // @@protoc_insertion_point(field_release:genomestore.Gene.ref)
  
  return ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Gene::set_allocated_ref(std::string* ref) {
  if (ref != nullptr) {
    
  } else {
    
  }
  ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Gene.ref)
}

// string chr = 4;
inline void Gene::clear_chr() {
  chr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Gene::chr() const {
  // @@protoc_insertion_point(field_get:genomestore.Gene.chr)
  return chr_.GetNoArena();
}
inline void Gene::set_chr(const std::string& value) {
  
  chr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Gene.chr)
}
inline void Gene::set_chr(std::string&& value) {
  
  chr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Gene.chr)
}
inline void Gene::set_chr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Gene.chr)
}
inline void Gene::set_chr(const char* value, size_t size) {
  
  chr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Gene.chr)
}
inline std::string* Gene::mutable_chr() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Gene.chr)
  return chr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Gene::release_chr() {
  // @@protoc_insertion_point(field_release:genomestore.Gene.chr)
  
  return chr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Gene::set_allocated_chr(std::string* chr) {
  if (chr != nullptr) {
    
  } else {
    
  }
  chr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chr);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Gene.chr)
}

// .genomestore.Interval tx = 5;
inline bool Gene::has_tx() const {
  return this != internal_default_instance() && tx_ != nullptr;
}
inline void Gene::clear_tx() {
  if (GetArenaNoVirtual() == nullptr && tx_ != nullptr) {
    delete tx_;
  }
  tx_ = nullptr;
}
inline const ::genomestore::Interval& Gene::tx() const {
  const ::genomestore::Interval* p = tx_;
  // @@protoc_insertion_point(field_get:genomestore.Gene.tx)
  return p != nullptr ? *p : *reinterpret_cast<const ::genomestore::Interval*>(
      &::genomestore::_Interval_default_instance_);
}
inline ::genomestore::Interval* Gene::release_tx() {
  // @@protoc_insertion_point(field_release:genomestore.Gene.tx)
  
  ::genomestore::Interval* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::genomestore::Interval* Gene::mutable_tx() {
  
  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::genomestore::Interval>(GetArenaNoVirtual());
    tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:genomestore.Gene.tx)
  return tx_;
}
inline void Gene::set_allocated_tx(::genomestore::Interval* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_;
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    
  } else {
    
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:genomestore.Gene.tx)
}

// .genomestore.Interval cds = 6;
inline bool Gene::has_cds() const {
  return this != internal_default_instance() && cds_ != nullptr;
}
inline void Gene::clear_cds() {
  if (GetArenaNoVirtual() == nullptr && cds_ != nullptr) {
    delete cds_;
  }
  cds_ = nullptr;
}
inline const ::genomestore::Interval& Gene::cds() const {
  const ::genomestore::Interval* p = cds_;
  // @@protoc_insertion_point(field_get:genomestore.Gene.cds)
  return p != nullptr ? *p : *reinterpret_cast<const ::genomestore::Interval*>(
      &::genomestore::_Interval_default_instance_);
}
inline ::genomestore::Interval* Gene::release_cds() {
  // @@protoc_insertion_point(field_release:genomestore.Gene.cds)
  
  ::genomestore::Interval* temp = cds_;
  cds_ = nullptr;
  return temp;
}
inline ::genomestore::Interval* Gene::mutable_cds() {
  
  if (cds_ == nullptr) {
    auto* p = CreateMaybeMessage<::genomestore::Interval>(GetArenaNoVirtual());
    cds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:genomestore.Gene.cds)
  return cds_;
}
inline void Gene::set_allocated_cds(::genomestore::Interval* cds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cds_;
  }
  if (cds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cds, submessage_arena);
    }
    
  } else {
    
  }
  cds_ = cds;
  // @@protoc_insertion_point(field_set_allocated:genomestore.Gene.cds)
}

// repeated .genomestore.Interval exons = 7;
inline int Gene::exons_size() const {
  return exons_.size();
}
inline void Gene::clear_exons() {
  exons_.Clear();
}
inline ::genomestore::Interval* Gene::mutable_exons(int index) {
  // @@protoc_insertion_point(field_mutable:genomestore.Gene.exons)
  return exons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval >*
Gene::mutable_exons() {
  // @@protoc_insertion_point(field_mutable_list:genomestore.Gene.exons)
  return &exons_;
}
inline const ::genomestore::Interval& Gene::exons(int index) const {
  // @@protoc_insertion_point(field_get:genomestore.Gene.exons)
  return exons_.Get(index);
}
inline ::genomestore::Interval* Gene::add_exons() {
  // @@protoc_insertion_point(field_add:genomestore.Gene.exons)
  return exons_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval >&
Gene::exons() const {
  // @@protoc_insertion_point(field_list:genomestore.Gene.exons)
  return exons_;
}

// repeated .genomestore.Interval introns = 8;
inline int Gene::introns_size() const {
  return introns_.size();
}
inline void Gene::clear_introns() {
  introns_.Clear();
}
inline ::genomestore::Interval* Gene::mutable_introns(int index) {
  // @@protoc_insertion_point(field_mutable:genomestore.Gene.introns)
  return introns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval >*
Gene::mutable_introns() {
  // @@protoc_insertion_point(field_mutable_list:genomestore.Gene.introns)
  return &introns_;
}
inline const ::genomestore::Interval& Gene::introns(int index) const {
  // @@protoc_insertion_point(field_get:genomestore.Gene.introns)
  return introns_.Get(index);
}
inline ::genomestore::Interval* Gene::add_introns() {
  // @@protoc_insertion_point(field_add:genomestore.Gene.introns)
  return introns_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Interval >&
Gene::introns() const {
  // @@protoc_insertion_point(field_list:genomestore.Gene.introns)
  return introns_;
}

// -------------------------------------------------------------------

// Genome

// repeated string id = 1;
inline int Genome::id_size() const {
  return id_.size();
}
inline void Genome::clear_id() {
  id_.Clear();
}
inline const std::string& Genome::id(int index) const {
  // @@protoc_insertion_point(field_get:genomestore.Genome.id)
  return id_.Get(index);
}
inline std::string* Genome::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:genomestore.Genome.id)
  return id_.Mutable(index);
}
inline void Genome::set_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:genomestore.Genome.id)
  id_.Mutable(index)->assign(value);
}
inline void Genome::set_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:genomestore.Genome.id)
  id_.Mutable(index)->assign(std::move(value));
}
inline void Genome::set_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:genomestore.Genome.id)
}
inline void Genome::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:genomestore.Genome.id)
}
inline std::string* Genome::add_id() {
  // @@protoc_insertion_point(field_add_mutable:genomestore.Genome.id)
  return id_.Add();
}
inline void Genome::add_id(const std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:genomestore.Genome.id)
}
inline void Genome::add_id(std::string&& value) {
  id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:genomestore.Genome.id)
}
inline void Genome::add_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:genomestore.Genome.id)
}
inline void Genome::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:genomestore.Genome.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Genome::id() const {
  // @@protoc_insertion_point(field_list:genomestore.Genome.id)
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Genome::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:genomestore.Genome.id)
  return &id_;
}

// -------------------------------------------------------------------

// Variant

// string allele = 1;
inline void Variant::clear_allele() {
  allele_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Variant::allele() const {
  // @@protoc_insertion_point(field_get:genomestore.Variant.allele)
  return allele_.GetNoArena();
}
inline void Variant::set_allele(const std::string& value) {
  
  allele_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Variant.allele)
}
inline void Variant::set_allele(std::string&& value) {
  
  allele_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Variant.allele)
}
inline void Variant::set_allele(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  allele_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Variant.allele)
}
inline void Variant::set_allele(const char* value, size_t size) {
  
  allele_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Variant.allele)
}
inline std::string* Variant::mutable_allele() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Variant.allele)
  return allele_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variant::release_allele() {
  // @@protoc_insertion_point(field_release:genomestore.Variant.allele)
  
  return allele_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Variant::set_allocated_allele(std::string* allele) {
  if (allele != nullptr) {
    
  } else {
    
  }
  allele_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), allele);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Variant.allele)
}

// repeated float frequency = 2;
inline int Variant::frequency_size() const {
  return frequency_.size();
}
inline void Variant::clear_frequency() {
  frequency_.Clear();
}
inline float Variant::frequency(int index) const {
  // @@protoc_insertion_point(field_get:genomestore.Variant.frequency)
  return frequency_.Get(index);
}
inline void Variant::set_frequency(int index, float value) {
  frequency_.Set(index, value);
  // @@protoc_insertion_point(field_set:genomestore.Variant.frequency)
}
inline void Variant::add_frequency(float value) {
  frequency_.Add(value);
  // @@protoc_insertion_point(field_add:genomestore.Variant.frequency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Variant::frequency() const {
  // @@protoc_insertion_point(field_list:genomestore.Variant.frequency)
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Variant::mutable_frequency() {
  // @@protoc_insertion_point(field_mutable_list:genomestore.Variant.frequency)
  return &frequency_;
}

// -------------------------------------------------------------------

// Snp

// uint32 rsid = 1;
inline void Snp::clear_rsid() {
  rsid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Snp::rsid() const {
  // @@protoc_insertion_point(field_get:genomestore.Snp.rsid)
  return rsid_;
}
inline void Snp::set_rsid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rsid_ = value;
  // @@protoc_insertion_point(field_set:genomestore.Snp.rsid)
}

// string ref = 2;
inline void Snp::clear_ref() {
  ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Snp::ref() const {
  // @@protoc_insertion_point(field_get:genomestore.Snp.ref)
  return ref_.GetNoArena();
}
inline void Snp::set_ref(const std::string& value) {
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:genomestore.Snp.ref)
}
inline void Snp::set_ref(std::string&& value) {
  
  ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:genomestore.Snp.ref)
}
inline void Snp::set_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:genomestore.Snp.ref)
}
inline void Snp::set_ref(const char* value, size_t size) {
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:genomestore.Snp.ref)
}
inline std::string* Snp::mutable_ref() {
  
  // @@protoc_insertion_point(field_mutable:genomestore.Snp.ref)
  return ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Snp::release_ref() {
  // @@protoc_insertion_point(field_release:genomestore.Snp.ref)
  
  return ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Snp::set_allocated_ref(std::string* ref) {
  if (ref != nullptr) {
    
  } else {
    
  }
  ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:genomestore.Snp.ref)
}

// repeated .genomestore.Variant vars = 3;
inline int Snp::vars_size() const {
  return vars_.size();
}
inline void Snp::clear_vars() {
  vars_.Clear();
}
inline ::genomestore::Variant* Snp::mutable_vars(int index) {
  // @@protoc_insertion_point(field_mutable:genomestore.Snp.vars)
  return vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Variant >*
Snp::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_list:genomestore.Snp.vars)
  return &vars_;
}
inline const ::genomestore::Variant& Snp::vars(int index) const {
  // @@protoc_insertion_point(field_get:genomestore.Snp.vars)
  return vars_.Get(index);
}
inline ::genomestore::Variant* Snp::add_vars() {
  // @@protoc_insertion_point(field_add:genomestore.Snp.vars)
  return vars_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::genomestore::Variant >&
Snp::vars() const {
  // @@protoc_insertion_point(field_list:genomestore.Snp.vars)
  return vars_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace genomestore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::genomestore::Base> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::genomestore::Base>() {
  return ::genomestore::Base_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_genomestore_2eproto
