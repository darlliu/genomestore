// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomestore.proto

#include "genomestore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_genomestore_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_genomestore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Interval;
}  // namespace protobuf_genomestore_2eproto
namespace genomestore {
class IntervalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Interval>
      _instance;
} _Interval_default_instance_;
class GeneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gene>
      _instance;
} _Gene_default_instance_;
}  // namespace genomestore
namespace protobuf_genomestore_2eproto {
static void InitDefaultsInterval() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::genomestore::_Interval_default_instance_;
    new (ptr) ::genomestore::Interval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::genomestore::Interval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Interval =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInterval}, {}};

static void InitDefaultsGene() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::genomestore::_Gene_default_instance_;
    new (ptr) ::genomestore::Gene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::genomestore::Gene::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Gene =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGene}, {
      &protobuf_genomestore_2eproto::scc_info_Interval.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Interval.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gene.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, chr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, strand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, seqs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Interval, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, sym_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, chr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, cds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, exons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::genomestore::Gene, introns_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::genomestore::Interval)},
  { 13, -1, sizeof(::genomestore::Gene)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::genomestore::_Interval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::genomestore::_Gene_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "genomestore.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021genomestore.proto\022\013genomestore\"\215\001\n\010Int"
      "erval\022\013\n\003ref\030\001 \001(\t\022\013\n\003chr\030\002 \001(\t\022\r\n\005start"
      "\030\003 \001(\r\022\013\n\003len\030\004 \001(\r\022\016\n\006strand\030\005 \001(\010\022\036\n\003s"
      "eq\030\006 \003(\0162\021.genomestore.Base\022\014\n\004seqs\030\007 \001("
      "\t\022\r\n\005score\030\010 \001(\002\"\316\001\n\004Gene\022\n\n\002id\030\001 \001(\t\022\013\n"
      "\003sym\030\002 \001(\t\022\013\n\003ref\030\003 \001(\t\022\013\n\003chr\030\004 \001(\t\022!\n\002"
      "tx\030\005 \001(\0132\025.genomestore.Interval\022\"\n\003cds\030\006"
      " \001(\0132\025.genomestore.Interval\022$\n\005exons\030\007 \003"
      "(\0132\025.genomestore.Interval\022&\n\007introns\030\010 \003"
      "(\0132\025.genomestore.Interval*0\n\004Base\022\005\n\001a\020\000"
      "\022\005\n\001c\020\001\022\005\n\001g\020\002\022\005\n\001t\020\003\022\005\n\001u\020\004\022\005\n\001n\020\005b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomestore.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_genomestore_2eproto
namespace genomestore {
const ::google::protobuf::EnumDescriptor* Base_descriptor() {
  protobuf_genomestore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genomestore_2eproto::file_level_enum_descriptors[0];
}
bool Base_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Interval::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Interval::kRefFieldNumber;
const int Interval::kChrFieldNumber;
const int Interval::kStartFieldNumber;
const int Interval::kLenFieldNumber;
const int Interval::kStrandFieldNumber;
const int Interval::kSeqFieldNumber;
const int Interval::kSeqsFieldNumber;
const int Interval::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Interval::Interval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_genomestore_2eproto::scc_info_Interval.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:genomestore.Interval)
}
Interval::Interval(const Interval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      seq_(from.seq_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ref().size() > 0) {
    ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  chr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chr().size() > 0) {
    chr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chr_);
  }
  seqs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seqs().size() > 0) {
    seqs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seqs_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&start_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:genomestore.Interval)
}

void Interval::SharedCtor() {
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&start_)) + sizeof(score_));
}

Interval::~Interval() {
  // @@protoc_insertion_point(destructor:genomestore.Interval)
  SharedDtor();
}

void Interval::SharedDtor() {
  ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Interval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Interval::descriptor() {
  ::protobuf_genomestore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_genomestore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Interval& Interval::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_genomestore_2eproto::scc_info_Interval.base);
  return *internal_default_instance();
}


void Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:genomestore.Interval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seq_.Clear();
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seqs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&start_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

bool Interval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:genomestore.Interval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ref().data(), static_cast<int>(this->ref().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "genomestore.Interval.ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chr().data(), static_cast<int>(this->chr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "genomestore.Interval.chr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 len = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool strand = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .genomestore.Base seq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_seq(static_cast< ::genomestore::Base >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_seq(static_cast< ::genomestore::Base >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string seqs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seqs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seqs().data(), static_cast<int>(this->seqs().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "genomestore.Interval.seqs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:genomestore.Interval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:genomestore.Interval)
  return false;
#undef DO_
}

void Interval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:genomestore.Interval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ref = 1;
  if (this->ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Interval.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ref(), output);
  }

  // string chr = 2;
  if (this->chr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chr().data(), static_cast<int>(this->chr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Interval.chr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chr(), output);
  }

  // uint32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start(), output);
  }

  // uint32 len = 4;
  if (this->len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->len(), output);
  }

  // bool strand = 5;
  if (this->strand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->strand(), output);
  }

  // repeated .genomestore.Base seq = 6;
  if (this->seq_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_seq_cached_byte_size_));
  }
  for (int i = 0, n = this->seq_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->seq(i), output);
  }

  // string seqs = 7;
  if (this->seqs().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seqs().data(), static_cast<int>(this->seqs().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Interval.seqs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->seqs(), output);
  }

  // float score = 8;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:genomestore.Interval)
}

::google::protobuf::uint8* Interval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:genomestore.Interval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ref = 1;
  if (this->ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Interval.ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ref(), target);
  }

  // string chr = 2;
  if (this->chr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chr().data(), static_cast<int>(this->chr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Interval.chr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chr(), target);
  }

  // uint32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start(), target);
  }

  // uint32 len = 4;
  if (this->len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->len(), target);
  }

  // bool strand = 5;
  if (this->strand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->strand(), target);
  }

  // repeated .genomestore.Base seq = 6;
  if (this->seq_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _seq_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->seq_, target);
  }

  // string seqs = 7;
  if (this->seqs().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seqs().data(), static_cast<int>(this->seqs().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Interval.seqs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->seqs(), target);
  }

  // float score = 8;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:genomestore.Interval)
  return target;
}

size_t Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:genomestore.Interval)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .genomestore.Base seq = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->seq_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->seq(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _seq_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string ref = 1;
  if (this->ref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ref());
  }

  // string chr = 2;
  if (this->chr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chr());
  }

  // string seqs = 7;
  if (this->seqs().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seqs());
  }

  // uint32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start());
  }

  // uint32 len = 4;
  if (this->len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->len());
  }

  // bool strand = 5;
  if (this->strand() != 0) {
    total_size += 1 + 1;
  }

  // float score = 8;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Interval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:genomestore.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  const Interval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Interval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:genomestore.Interval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:genomestore.Interval)
    MergeFrom(*source);
  }
}

void Interval::MergeFrom(const Interval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:genomestore.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seq_.MergeFrom(from.seq_);
  if (from.ref().size() > 0) {

    ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  if (from.chr().size() > 0) {

    chr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chr_);
  }
  if (from.seqs().size() > 0) {

    seqs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seqs_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.len() != 0) {
    set_len(from.len());
  }
  if (from.strand() != 0) {
    set_strand(from.strand());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Interval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:genomestore.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interval::CopyFrom(const Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:genomestore.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interval::IsInitialized() const {
  return true;
}

void Interval::Swap(Interval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Interval::InternalSwap(Interval* other) {
  using std::swap;
  seq_.InternalSwap(&other->seq_);
  ref_.Swap(&other->ref_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chr_.Swap(&other->chr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  seqs_.Swap(&other->seqs_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_, other->start_);
  swap(len_, other->len_);
  swap(strand_, other->strand_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Interval::GetMetadata() const {
  protobuf_genomestore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_genomestore_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gene::InitAsDefaultInstance() {
  ::genomestore::_Gene_default_instance_._instance.get_mutable()->tx_ = const_cast< ::genomestore::Interval*>(
      ::genomestore::Interval::internal_default_instance());
  ::genomestore::_Gene_default_instance_._instance.get_mutable()->cds_ = const_cast< ::genomestore::Interval*>(
      ::genomestore::Interval::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gene::kIdFieldNumber;
const int Gene::kSymFieldNumber;
const int Gene::kRefFieldNumber;
const int Gene::kChrFieldNumber;
const int Gene::kTxFieldNumber;
const int Gene::kCdsFieldNumber;
const int Gene::kExonsFieldNumber;
const int Gene::kIntronsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gene::Gene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_genomestore_2eproto::scc_info_Gene.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:genomestore.Gene)
}
Gene::Gene(const Gene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      exons_(from.exons_),
      introns_(from.introns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  sym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sym().size() > 0) {
    sym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sym_);
  }
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ref().size() > 0) {
    ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  chr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chr().size() > 0) {
    chr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chr_);
  }
  if (from.has_tx()) {
    tx_ = new ::genomestore::Interval(*from.tx_);
  } else {
    tx_ = NULL;
  }
  if (from.has_cds()) {
    cds_ = new ::genomestore::Interval(*from.cds_);
  } else {
    cds_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:genomestore.Gene)
}

void Gene::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cds_) -
      reinterpret_cast<char*>(&tx_)) + sizeof(cds_));
}

Gene::~Gene() {
  // @@protoc_insertion_point(destructor:genomestore.Gene)
  SharedDtor();
}

void Gene::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sym_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tx_;
  if (this != internal_default_instance()) delete cds_;
}

void Gene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gene::descriptor() {
  ::protobuf_genomestore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_genomestore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gene& Gene::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_genomestore_2eproto::scc_info_Gene.base);
  return *internal_default_instance();
}


void Gene::Clear() {
// @@protoc_insertion_point(message_clear_start:genomestore.Gene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exons_.Clear();
  introns_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tx_ != NULL) {
    delete tx_;
  }
  tx_ = NULL;
  if (GetArenaNoVirtual() == NULL && cds_ != NULL) {
    delete cds_;
  }
  cds_ = NULL;
  _internal_metadata_.Clear();
}

bool Gene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:genomestore.Gene)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "genomestore.Gene.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sym = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sym()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sym().data(), static_cast<int>(this->sym().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "genomestore.Gene.sym"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ref().data(), static_cast<int>(this->ref().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "genomestore.Gene.ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chr().data(), static_cast<int>(this->chr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "genomestore.Gene.chr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .genomestore.Interval tx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .genomestore.Interval cds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .genomestore.Interval exons = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_exons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .genomestore.Interval introns = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_introns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:genomestore.Gene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:genomestore.Gene)
  return false;
#undef DO_
}

void Gene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:genomestore.Gene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Gene.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string sym = 2;
  if (this->sym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sym().data(), static_cast<int>(this->sym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Gene.sym");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sym(), output);
  }

  // string ref = 3;
  if (this->ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Gene.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ref(), output);
  }

  // string chr = 4;
  if (this->chr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chr().data(), static_cast<int>(this->chr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Gene.chr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chr(), output);
  }

  // .genomestore.Interval tx = 5;
  if (this->has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_tx(), output);
  }

  // .genomestore.Interval cds = 6;
  if (this->has_cds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_cds(), output);
  }

  // repeated .genomestore.Interval exons = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->exons(static_cast<int>(i)),
      output);
  }

  // repeated .genomestore.Interval introns = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->introns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->introns(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:genomestore.Gene)
}

::google::protobuf::uint8* Gene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:genomestore.Gene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Gene.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string sym = 2;
  if (this->sym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sym().data(), static_cast<int>(this->sym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Gene.sym");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sym(), target);
  }

  // string ref = 3;
  if (this->ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Gene.ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ref(), target);
  }

  // string chr = 4;
  if (this->chr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chr().data(), static_cast<int>(this->chr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "genomestore.Gene.chr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chr(), target);
  }

  // .genomestore.Interval tx = 5;
  if (this->has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_tx(), deterministic, target);
  }

  // .genomestore.Interval cds = 6;
  if (this->has_cds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_cds(), deterministic, target);
  }

  // repeated .genomestore.Interval exons = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->exons(static_cast<int>(i)), deterministic, target);
  }

  // repeated .genomestore.Interval introns = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->introns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->introns(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:genomestore.Gene)
  return target;
}

size_t Gene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:genomestore.Gene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .genomestore.Interval exons = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->exons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exons(static_cast<int>(i)));
    }
  }

  // repeated .genomestore.Interval introns = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->introns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->introns(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string sym = 2;
  if (this->sym().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sym());
  }

  // string ref = 3;
  if (this->ref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ref());
  }

  // string chr = 4;
  if (this->chr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chr());
  }

  // .genomestore.Interval tx = 5;
  if (this->has_tx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tx_);
  }

  // .genomestore.Interval cds = 6;
  if (this->has_cds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cds_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:genomestore.Gene)
  GOOGLE_DCHECK_NE(&from, this);
  const Gene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:genomestore.Gene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:genomestore.Gene)
    MergeFrom(*source);
  }
}

void Gene::MergeFrom(const Gene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:genomestore.Gene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exons_.MergeFrom(from.exons_);
  introns_.MergeFrom(from.introns_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.sym().size() > 0) {

    sym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sym_);
  }
  if (from.ref().size() > 0) {

    ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  if (from.chr().size() > 0) {

    chr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chr_);
  }
  if (from.has_tx()) {
    mutable_tx()->::genomestore::Interval::MergeFrom(from.tx());
  }
  if (from.has_cds()) {
    mutable_cds()->::genomestore::Interval::MergeFrom(from.cds());
  }
}

void Gene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:genomestore.Gene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gene::CopyFrom(const Gene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:genomestore.Gene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gene::IsInitialized() const {
  return true;
}

void Gene::Swap(Gene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gene::InternalSwap(Gene* other) {
  using std::swap;
  CastToBase(&exons_)->InternalSwap(CastToBase(&other->exons_));
  CastToBase(&introns_)->InternalSwap(CastToBase(&other->introns_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sym_.Swap(&other->sym_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ref_.Swap(&other->ref_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chr_.Swap(&other->chr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tx_, other->tx_);
  swap(cds_, other->cds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gene::GetMetadata() const {
  protobuf_genomestore_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_genomestore_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace genomestore
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::genomestore::Interval* Arena::CreateMaybeMessage< ::genomestore::Interval >(Arena* arena) {
  return Arena::CreateInternal< ::genomestore::Interval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::genomestore::Gene* Arena::CreateMaybeMessage< ::genomestore::Gene >(Arena* arena) {
  return Arena::CreateInternal< ::genomestore::Gene >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
